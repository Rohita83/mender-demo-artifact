image: docker:git

variables:
  REPO_NAME: github.com/mendersoftware/mender-demo-artifact
  GITHUB_RELEASE_BINARY: mender-demo-artifact
  GITHUB_RELEASE_DEPLOY_REPO: mendersoftware/mender-demo-artifact
  MENDER_VERSION: 'master'
  MENDER_ARTIFACT_VERSION: '3.0.0'
  INTEGRATION_VERSION: '2.0.0'
  ARTIFACT_NAME: mender-demo-artifact-$INTEGRATION_VERSION
  MENDER_DEB_VERSION: '2.0.0'
  RASPBIAN_VERSION: '2019-04-08'

stages:
  - build
  - test
  - publish

build:	
  stage: build	
  services:	
    - docker:dind	
  script:	
    - docker build -t mender-demo-artifact --build-arg MENDER_ARTIFACT_VERSION=$MENDER_ARTIFACT_VERSION --build-arg MENDER_VERSION=$MENDER_VERSION --build-arg ARTIFACT_NAME=$ARTIFACT_NAME .	
    # Extract artifact	
    - mkdir output	
    - docker run --rm -v $PWD/output:/output mender-demo-artifact	
  artifacts:	
    paths:	
      - output/mender-demo-artifact.mender	

test:format:
  stage: test
  before_script:
    - apk add --no-cache bash
    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin
    - git clone http://github.com/mendersoftware/mendertesting
  script:
    # Check commit compliance.
    - mendertesting/check_commits.sh

test:unit:
  stage: test
  image: docker:18-dind
  tags:
    - mender-qa-slave
  dependencies:
    - build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - /usr/local/bin/dockerd-entrypoint.sh &
    - sleep 10
    - export DOCKER_HOST="unix:///var/run/docker.sock"
    - docker version
    - apk add git
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - apk add python3 bash gcc openssh make openssl-dev libffi-dev libc-dev python3-dev
    - cd tests
    - pip3 install --upgrade -r requirements.txt
    - python3 -m pytest -v --mender-version $MENDER_VERSION --mender-deb-version $MENDER_DEB_VERSION

publish:s3:
  stage: publish
  only:
    - tags
  dependencies:
    - build
  script:
    - echo "publish mender-demo-artifact to s3 here"
    - mkdir $INTEGRATION_VERSION
    - cp mender-demo-artifact.mender $INTEGRATION_VERSION/mender-demo-artifact.mender
    # make sure to push both mender-demo-artifact and the integration version subfolder to publish a versioned copy as well
